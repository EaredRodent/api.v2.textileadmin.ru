<?php
/**
 * Created by PhpStorm.
 * User: alexander
 * Date: 14.01.2019
 * Time: 15:53
 */

namespace app\modules\v1\controllers;

use app\gii\GiiSlsInvoice;
use app\modules\AppMod;
use app\modules\v1\classes\ActiveControllerExtended;
use app\modules\v1\models\sls\SlsInvoice;
use Yii;
use yii\db\ActiveRecord;
use yii\web\HttpException;

class SlsInvoiceController extends ActiveControllerExtended
{
    /** @var SlsInvoice $modelClass */
    public $modelClass = 'app\modules\v1\models\sls\SlsInvoice';

    public function actions()
    {
        $actions = parent::actions();
        unset($actions['create']);
        return $actions; // TODO: Change the autogenerated stub
    }

    const actionGetAccept = 'GET /v1/sls-invoice/get-accept';

    /**
     * @return array|ActiveRecord|self[]
     */
    public function actionGetAccept()
    {
        return SlsInvoice::getAccept();
    }

    const actionGetPartPay = 'GET /v1/sls-invoice/get-part-pay';

    /**
     * @return array|ActiveRecord[]|self[]
     */
    public function actionGetPartPay()
    {
        return SlsInvoice::getPartPay();
    }

    const actionGetPartPayWithStateAccept = 'GET /v1/sls-invoice/get-part-pay-with-state-accept';

    /**
     * @return array|ActiveRecord[]|self[]
     */
    public function actionGetPartPayWithStateAccept()
    {
        $invoices = SlsInvoice::getAccept();

        $result = [];
        foreach ($invoices as $invoice) {
            if (bccomp(bcadd($invoice->summ_pay, $invoice->cur_pay), $invoice->summ) < 0) {
                $result[] = $invoice;
            }
        }

        return $result;
    }

    const actionGetWait = 'GET /v1/sls-invoice/get-wait';

    public function actionGetWait()
    {
        $resp = [];
        $usersList = [
            // АМ
            9 => 'Едуш',
            // ЕИ
            11 => 'Кривоносова',
            // Юра
            12 => 'Калашников',
            // Алена
            8 => 'Молодцова',
        ];
        foreach ($usersList as $key => $name) {

            $elm['name'] = $name;
            $elm['items'] = SlsInvoice::find()
                ->where(['user_fk' => $key, 'state' => SlsInvoice::stateWait])
                ->orderBy('sort')
                ->all();
            $resp[] = $elm;
        }
        return $resp;
    }

    const actionReject = 'POST /v1/sls-invoice/reject';

    /**
     * Отклонить счет
     * @param $id
     * @throws HttpException
     */
    public function actionReject($id)
    {
        $invoice = SlsInvoice::get($id);

        $userId = $invoice->user_fk;
        $prevSort = $invoice->sort;

        // Новая позиция в конце отклоненных платежей
        // (позиция сортировки не нужна, сортировать будем по дате отклонения)
        //$newSort = SlsInvoice::calcCount(SlsInvoice::stateReject, $userId) + 1;
        $invoice->state = SlsInvoice::stateReject;
        //$invoice->sort = $newSort;
        $invoice->sort = 0;
        $invoice->ts_reject = date('Y-m-d H:i:s');
        $invoice->save();

        // Сдвиг всех ожидающих платежей вверх
        $waitInvoices = SlsInvoice::readSortDown(SlsInvoice::stateWait, $userId, $prevSort);
        foreach ($waitInvoices as $waitInvoice) {
            $waitInvoice->sort--;
            $waitInvoice->save();
        }
    }


    const actionRejectUndo = 'POST /v1/sls-invoice/reject-undo';

    /**
     * Отменить отклонение счета
     * @param $id
     * @return string
     * @throws HttpException
     */
    public function actionRejectUndo($id)
    {
        $invoice = SlsInvoice::get($id);

        if (!$invoice) {
            throw new HttpException(200, 'Счет не найден', 200);
        }

        if ($invoice->state !== SlsInvoice::stateReject) {
            throw new HttpException(200, 'Счет не в статусе отклонен', 200);
        }

        $invoice->state = SlsInvoice::stateWait;
        $countInvoices = SlsInvoice::calcCount(SlsInvoice::stateWait, $invoice->user_fk);
        $invoice->sort = $countInvoices + 1;
        $invoice->ts_reject = null;
        $invoice->save();
        return 'ok';
    }


    const actionSortUp = 'POST /v1/sls-invoice/sort-up';

    /**
     * Поднять счет на позицию вверх
     * @param $id
     * @throws HttpException
     */
    public function actionSortUp($id)
    {
        $invoice = SlsInvoice::get($id);

        $userId = $invoice->user_fk;

//        if (Yii::$app->user->getId() !== $userId) {
//            throw new HttpException(200, 'Не трогай чужой документ');
//        }

        $state = $invoice->state;

        $prevSort = $invoice->sort;
        $newSort = $prevSort - 1;

        if ($prevSort > 1) {
            $upperInvoice = SlsInvoice::readSortItem($state, $userId, $newSort);
            $upperInvoice->sort = $prevSort;
            $upperInvoice->save();

            $invoice->sort = $newSort;
            $invoice->save();
        } else {
            throw new HttpException(200, 'Счет уже первый в очереди', 200);
        }
    }


    const actionReturn = 'POST /v1/sls-invoice/return';

    /**
     * @param $id
     */
    public function actionReturn($id)
    {
        $invoice = SlsInvoice::get($id);

        if ($invoice->summ_pay > 0) {
            // Убрать в частично оплаченные
            $invoice->state = SlsInvoice::statePartPay;
            $invoice->save();
        } else {
            // Убрать в подготавливаемые
            $userId = $invoice->user_fk;
            $sort = SlsInvoice::calcCount(SlsInvoice::stateWait, $userId) + 1;
            $prevSort = $invoice->sort;

            $invoice->state = SlsInvoice::stateWait;
            $invoice->sort = $sort;
            $invoice->save();

            // Закрыть "дырку"
            $acceptInvoices = SlsInvoice::readSortDown(SlsInvoice::stateAccept, $userId, $prevSort);
            foreach ($acceptInvoices as $acceptInvoice) {
                $acceptInvoice->sort--;
                $acceptInvoice->save();
            }
        }
    }


    const actionAccept = 'POST /v1/sls-invoice/accept';

    /**
     * @param $id
     * @param $cur_pay
     * @param string $comment
     */
    public function actionAccept($id, $cur_pay, $comment = '')
    {
        // Позиция в сортировке
        $newSort = SlsInvoice::calcCount(SlsInvoice::stateAccept) + 1;

        $invoice = SlsInvoice::get($id);

        $prevSort = $invoice->sort;
        $userId = $invoice->user_fk;

        $invoice->state = SlsInvoice::stateAccept;
        $invoice->sort = $newSort;
        $invoice->cur_pay = $cur_pay;
        $invoice->comment = $comment;
        $invoice->save();

        if ($invoice->summ_pay == 0) {
            // Закрыть "дырку" если из подготавливаемых
            $waitInvoices = SlsInvoice::readSortDown(SlsInvoice::stateWait, $userId, $prevSort);
            foreach ($waitInvoices as $waitInvoice) {
                $waitInvoice->sort = $waitInvoice->sort - 1;
                $waitInvoice->save();
            }
        }
    }


    const actionGetRejectInvoices = 'GET /v1/sls-invoice/get-reject-invoices';

    /**
     * Вернуть список отклоненных счетов
     */
    public function actionGetRejectInvoices()
    {
        return SlsInvoice::find()
            ->where(['state' => SlsInvoice::stateReject])
            ->orderBy('ts_reject, id')
            ->all();
    }

    const actionGetManagers = 'GET /v1/sls-invoice/get-managers';

    public function actionGetManagers()
    {
        return [
            [
                'id' => 9,
                'short_name' => 'Едуш'
            ],
            [
                'id' => 11,
                'short_name' => 'Кривоносова'
            ],
            [
                'id' => 12,
                'short_name' => 'Калашников'
            ],
            [
                'id' => 8,
                'short_name' => 'Молодцова'
            ]
        ];
    }

    const actionCreate = 'POST /v1/sls-invoice/create';

    /**
     * Создании счета вручную
     * @param $user_fk
     * @param $title
     * @param $summ
     * @param null $ts_pay
     * @return array
     * @throws HttpException
     */
    public function actionCreate($user_fk, $title, $summ, $ts_pay = null)
    {
        $invoice = new SlsInvoice();

        $invoice->user_fk = $user_fk;
        $invoice->title = $title;
        $invoice->summ = $summ;
        $invoice->ts_pay = $ts_pay;

        $invoice->state = SlsInvoice::stateWait;
        $invoice->sort = SlsInvoice::calcCount(SlsInvoice::stateWait, $user_fk) + 1;
        $invoice->save();

        return ['_result_' => 'success', 'id' => $invoice->id];
    }

    const actionEdit = 'POST /v1/sls-invoice/edit';

    public function actionEdit($id, $user_fk, $title, $summ, $ts_pay = null, $cur_pay = null, $summ_pay = null)
    {
        $invoice = SlsInvoice::get($id);

        // Произошло изменение юзера
        if ($user_fk !== $invoice->user_fk) {
            // Убрать дырку с инвойсов предыдущего юзера
            $waitInvoices = SlsInvoice::readSortDown(SlsInvoice::stateWait, $invoice->user_fk, $invoice->sort);
            foreach ($waitInvoices as $waitInvoice) {
                $waitInvoice->sort = $waitInvoice->sort - 1;
                $waitInvoice->save();
            }

            // Добавить в конец новых
            $invoice->sort = SlsInvoice::calcCount(SlsInvoice::stateWait, $user_fk) + 1;

        }

        $invoice->user_fk = $user_fk;
        $invoice->title = $title;
        $invoice->summ = $summ;
        $invoice->ts_pay = $ts_pay;
        $invoice->cur_pay = $cur_pay;
        $invoice->summ_pay = $summ_pay;
        $invoice->save();

        return ['_result_' => 'success', 'id' => $invoice->id];
    }

    const actionUploadFile = 'POST /v1/sls-invoice/upload-file';

    public function actionUploadFile($id)
    {
        foreach ($_FILES as $file) {
            move_uploaded_file($file['tmp_name'], Yii::getAlias(AppMod::filesRout[AppMod::filesInvoiceAttachement]) . '/' . $id . '-' . $file['name']);
        }
    }

    const actionDeleteFile = 'POST /v1/sls-invoice/delete-file';

    public function actionDeleteFile($fileName)
    {
        $filePath = Yii::getAlias(AppMod::filesRout[AppMod::filesInvoiceAttachement]) . '/' . $fileName;
        if (file_exists($filePath)) {
            unlink($filePath);
        }
    }

    const actionGetAttachment = 'GET /v1/sls-invoice/get-attachment';

    public function actionGetAttachment($id)
    {

        $attachment = SlsInvoice::findOne(['id' => $id])->toArray(['attachment'])['attachment'];
        return $attachment;
    }
}