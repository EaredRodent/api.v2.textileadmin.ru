<?php
/**
 * Created by PhpStorm.
 * User: alexander
 * Date: 14.01.2019
 * Time: 15:53
 */

namespace app\modules\v1\controllers;

use app\extension\Helper;
use app\gii\GiiSlsInvoice;
use app\models\AnxUser;
use app\modules\AppMod;
use app\modules\v1\classes\ActiveControllerExtended;
use app\modules\v1\models\sls\SlsInvoice;
use app\modules\v1\models\sls\SlsInvoiceType;
use Yii;
use yii\db\ActiveRecord;
use yii\web\HttpException;

class SlsInvoiceController extends ActiveControllerExtended
{
    /** @var SlsInvoice $modelClass */
    public $modelClass = 'app\modules\v1\models\sls\SlsInvoice';

    public function actions()
    {
        $actions = parent::actions();
        unset($actions['create']);
        return $actions; // TODO: Change the autogenerated stub
    }

    const actionGetAccept = 'GET /v1/sls-invoice/get-accept';

    /**
     * @return array|ActiveRecord|self[]
     */
    public function actionGetAccept()
    {
        return SlsInvoice::getAccept();
    }

    const actionGetPartPay = 'GET /v1/sls-invoice/get-part-pay';

    /**
     * @return array|ActiveRecord[]|self[]
     */
    public function actionGetPartPay()
    {
        return SlsInvoice::getPartPay();
    }

    const actionGetPartPayWithStateAccept = 'GET /v1/sls-invoice/get-part-pay-with-state-accept';

    /**
     * @return array|ActiveRecord[]|self[]
     */
    public function actionGetPartPayWithStateAccept()
    {
        $invoices = SlsInvoice::getAccept();

        $result = [];
        foreach ($invoices as $invoice) {
            if (bccomp(bcadd($invoice->summ_pay, $invoice->cur_pay), $invoice->summ) < 0) {
                $result[] = $invoice;
            }
        }

        return $result;
    }

    const actionGetWait = 'GET /v1/sls-invoice/get-wait';

    /**
     * Получить счета на подготовке
     * mode - actual - счета в этом и прошедших месяцах
     * mode - future - счета в будущем
     * @param string $mode
     * @return array
     */
    public function actionGetWait($mode = 'actual')
    {
        $resp = [];
        /** @var SlsInvoiceType[] $invoiceTypes */
        $invoiceTypes = SlsInvoiceType::find()
            ->orderBy('sort')
            ->all();

        foreach ($invoiceTypes as $invoiceType) {
            $elm['id'] = $invoiceType->id;
            $elm['name'] = $invoiceType->name;
            $elm['items'] = $this->getWaitGetInvoices($invoiceType->id, $mode);
            $resp[] = $elm;
        }

        $resp[] = [
            'id' => 0,
            'name' => 'Счета без категории',
            'items' => $this->getWaitGetInvoices(null, $mode)
        ];

        return $resp;
    }

    private function getWaitGetInvoices($invoiceTypeID, $mode)
    {
        $lastDayOnCurrentMonth = date('Y-m-t 23:59:59', time());

        $query = SlsInvoice::find()
            ->where(['type_fk' => $invoiceTypeID])
            ->andWhere(['IN', 'state', [SlsInvoice::stateWait, SlsInvoice::statePartPay, SlsInvoice::stateAccept]]);

        if ($mode === 'actual') {
            $query->andWhere(['or', ['<=', 'ts_pay', $lastDayOnCurrentMonth], 'ts_pay IS NULL']);
        } else {
            $query->andWhere(['>', 'ts_pay', $lastDayOnCurrentMonth]);
        }

        /** @var SlsInvoice[] $invoices */
        $invoices = $query
            ->orderBy('important DESC, ts_pay')
            ->all();

        $items = [];

        foreach ($invoices as $invoice) {
            $invoice->sum_rest = $invoice->summ -
                $invoice->summ_pay -
                ($invoice->state === SlsInvoice::stateAccept ? $invoice->cur_pay : 0);

            if ($invoice->sum_rest > 0 || $invoice->summ === 0) {
                $items[] = $invoice;
            }
        }

        return $items;
    }

    const actionReject = 'POST /v1/sls-invoice/reject';

    /**
     * Отклонить счет
     * @param $id
     * @throws HttpException
     */
    public function actionReject($id)
    {
        $invoice = SlsInvoice::get($id);

        // Новая позиция в конце отклоненных платежей
        // (позиция сортировки не нужна, сортировать будем по дате отклонения)
        //$newSort = SlsInvoice::calcCount(SlsInvoice::stateReject, $userId) + 1;
        $invoice->state = SlsInvoice::stateReject;
        //$invoice->sort = $newSort;
        $invoice->sort = 0;
        $invoice->ts_reject = date('Y-m-d H:i:s');
        $invoice->save();
    }


    const actionRejectUndo = 'POST /v1/sls-invoice/reject-undo';

    /**
     * Отменить отклонение счета
     * @param $id
     * @return string
     * @throws HttpException
     */
    public function actionRejectUndo($id)
    {
        $invoice = SlsInvoice::get($id);

        if (!$invoice) {
            throw new HttpException(200, 'Счет не найден', 200);
        }

        if ($invoice->state !== SlsInvoice::stateReject) {
            throw new HttpException(200, 'Счет не в статусе отклонен', 200);
        }

        $invoice->state = SlsInvoice::stateWait;
        $invoice->ts_reject = null;
        $invoice->save();
        return 'ok';
    }


    const actionReturn = 'POST /v1/sls-invoice/return';

    /**
     * @param $id
     * @throws HttpException
     */
    public function actionReturn($id)
    {
        $invoice = SlsInvoice::get($id);

        if ($invoice->summ_pay > 0) {
            // Убрать в частично оплаченные
            $invoice->state = SlsInvoice::statePartPay;
            $invoice->save();
        } else {
            // Убрать в подготавливаемые
            $invoice->state = SlsInvoice::stateWait;
            $invoice->save();
        }
    }


    const actionAccept = 'POST /v1/sls-invoice/accept';

    /**
     * @param $id
     * @param $cur_pay
     * @param string $comment
     */
    public function actionAccept($id, $cur_pay, $comment = '')
    {
        $invoice = SlsInvoice::get($id);
        $invoice->state = SlsInvoice::stateAccept;
        $invoice->cur_pay = $cur_pay;
        $invoice->comment = $comment;
        $invoice->save();

        return ['_result_' => 'success'];
    }


    const actionGetRejectInvoices = 'GET /v1/sls-invoice/get-reject-invoices';

    /**
     * Вернуть список отклоненных счетов
     */
    public function actionGetRejectInvoices()
    {
        return SlsInvoice::find()
            ->where(['state' => SlsInvoice::stateReject])
            ->orderBy('ts_reject, id')
            ->all();
    }

    const actionGetManagers = 'GET /v1/sls-invoice/get-managers';

    public function actionGetManagers()
    {
        return [
            [
                'id' => 9,
                'short_name' => 'Едуш'
            ],
            [
                'id' => 11,
                'short_name' => 'Кривоносова'
            ],
            [
                'id' => 12,
                'short_name' => 'Калашников'
            ],
            [
                'id' => 8,
                'short_name' => 'Молодцова'
            ]
        ];
    }

    const actionCreate = 'POST /v1/sls-invoice/create';

    /**
     * Создать счет вручную
     * @param $title
     * @param $type_fk
     * @param $summ
     * @param $type_pay
     * @param null $ts_pay
     * @param bool $important
     * @return array
     * @throws HttpException
     * @throws \Throwable
     */
    public function actionCreate($title, $type_fk, $summ, $type_pay, $ts_pay, $important = false)
    {
        $invoice = new SlsInvoice();

        /** @var AnxUser $currentUser */
        $currentUser = Yii::$app->getUser()->getIdentity();

        $invoice->user_fk = $currentUser->id;
        $invoice->title = $title;
        $invoice->type_fk = $type_fk;
        $invoice->summ = $summ;
        $invoice->type_pay = $type_pay;
        $invoice->important = (int)$important;
        $invoice->ts_pay = $ts_pay;
        $invoice->state = SlsInvoice::stateWait;
        $invoice->sort = 0;
        $invoice->save();

        return ['_result_' => 'success'];
    }

    const actionEdit = 'POST /v1/sls-invoice/edit';

    /**
     * Редактировать счет
     * @param $id
     * @param $title
     * @param $type_fk
     * @param $summ
     * @param $ts_pay
     * @param bool $important
     * @param null $cur_pay
     * @return array
     * @throws HttpException
     */
    public function actionEdit($id, $title, $type_fk, $summ, $type_pay, $ts_pay, $important = false, $cur_pay = null)
    {
        $invoice = SlsInvoice::findOne(['id' => $id]);
        $invoice->title = $title;
        $invoice->type_fk = $type_fk;
        $invoice->summ = $summ;
        $invoice->type_pay = $type_pay;
        $invoice->important = (int)$important;
        $invoice->ts_pay = $ts_pay;
        $invoice->cur_pay = $cur_pay;
        $invoice->save();

        return ['_result_' => 'success'];
    }

    const actionUploadFile = 'POST /v1/sls-invoice/upload-file';

    /**
     * Прикрепить файл к счету
     * @param $id
     */
    public function actionUploadFile($id)
    {
        $pathToInvoiceAttachement = Yii::getAlias(AppMod::filesRout[AppMod::filesInvoiceAttachement]);
        foreach ($_FILES as $file) {
            $translitName = Helper::strTranslitFileName($file['name']);
            $fileName = $pathToInvoiceAttachement . '/' . $id . '-' . $translitName;
            move_uploaded_file($file['tmp_name'], $fileName);
        }

        // Модель не обновлялась, но нужно уведомить о загруженном файле

        Yii::$app->getModule('v1')->cmdTables[] = 'sls_invoice';
    }

    const actionDeleteFile = 'POST /v1/sls-invoice/delete-file';

    /**
     * Удалить файл
     * @param $fileName
     */
    public function actionDeleteFile($fileName)
    {
        $filePath = Yii::getAlias(AppMod::filesRout[AppMod::filesInvoiceAttachement]) . '/' . $fileName;
        if (file_exists($filePath)) {
            unlink($filePath);
        }

        // Модель не обновлялась, но нужно уведомить о загруженном файле

        Yii::$app->getModule('v1')->cmdTables[] = 'sls_invoice';
    }

    const actionGetAttachment = 'GET /v1/sls-invoice/get-attachment';

    /**
     * Получить прикрепленные с счету файлы
     * @param $id
     * @return mixed
     */
    public function actionGetAttachment($id)
    {
        return SlsInvoice::findOne(['id' => $id])->toArray(['attachment'])['attachment'];
    }

    const actionCurrentUserGetPrep = 'GET /v1/sls-invoice/current-user-get-prep';

    /**
     * Получить счета на подготовке для текущего пользователя
     * @throws \Throwable
     */
    public function actionCurrentUserGetPrep()
    {
        /** @var AnxUser $currentUser */
        $currentUser = Yii::$app->getUser()->getIdentity();

        return SlsInvoice::find()
            ->where(['user_fk' => $currentUser->id])
            ->andWhere(['state' => SlsInvoice::stateWait])
            ->orderBy('important DESC, ts_create')
            ->all();
    }

    const actionCurrentUserGetAccept = 'GET /v1/sls-invoice/current-user-get-accept';

    /**
     * Получить акцептованные счета для текущего пользователя
     * @return array|ActiveRecord[]
     * @throws \Throwable
     */
    public function actionCurrentUserGetAccept()
    {
        /** @var AnxUser $currentUser */
        $currentUser = Yii::$app->getUser()->getIdentity();

        return SlsInvoice::find()
            ->where(['user_fk' => $currentUser->id])
            ->andWhere(['state' => SlsInvoice::stateAccept])
            ->orderBy('important DESC, ts_pay')
            ->all();
    }

    const actionCurrentUserGetPartPay = 'GET /v1/sls-invoice/current-user-get-part-pay';

    /**
     * Получить частично опл. счета для текущего пользователя
     * @return array|void|ActiveRecord[]
     * @throws \Throwable
     */
    public function actionCurrentUserGetPartPay()
    {
        /** @var AnxUser $currentUser */
        $currentUser = Yii::$app->getUser()->getIdentity();

        return SlsInvoice::find()
            ->where(['user_fk' => $currentUser->id])
            ->andWhere(['or',
                ['state' => SlsInvoice::statePartPay],
                ['and', ['state' => SlsInvoice::stateAccept], 'summ != (summ_pay + cur_pay)']
            ])
            ->orderBy('important DESC, ts_pay')
            ->all();
    }

    const actionCurrentUserGetFullPay = 'GET /v1/sls-invoice/current-user-get-full-pay';

    /**
     * Получить полностью опл. счета для текущего пользователя
     * @return array|void|ActiveRecord[]
     * @throws \Throwable
     */
    public function actionCurrentUserGetFullPay($date)
    {
        /** @var AnxUser $currentUser */
        $currentUser = Yii::$app->getUser()->getIdentity();

        $dateStart = date('Y-m-01 00:00:00', strtotime($date));
        $dateEnd = date('Y-m-t 23:59:59', strtotime($date));

        return SlsInvoice::find()
            ->where(['user_fk' => $currentUser->id])
            ->andWhere(['state' => SlsInvoice::stateFullPay])
            ->andWhere(['and', ['>=', 'ts_create', $dateStart], ['<=', 'ts_create', $dateEnd]])
            ->orderBy('important DESC, ts_create')
            ->all();
    }
}